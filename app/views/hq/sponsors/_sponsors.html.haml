- sort_by ||= {}
- sortable_by_column ||= false

- if sponsors.empty?
  .panel.panel-default
    .panel-body
      No Sponsors found
- else
  .table-responsive
    %table.table{name: 'sponsors'}
      %thead
        %tr
          %th
            -if sortable_by_column
              =link_to "Osra Num", params.merge(sort_by: {column: :osra_num, direction: set_sort_by_direction(:osra_num, sort_by)})
              -if sort_by["column"] == "osra_num"
                %span{class: "glyphicon th_sort_#{set_sort_by_direction(:osra_num, sort_by).to_s}"}
            -else
              Osra Num
          %th
            -if sortable_by_column
              =link_to "Name", params.merge(sort_by: {column: :name, direction: set_sort_by_direction(:name, sort_by)})
              -if sort_by["column"] == "name"
                %span{class: "glyphicon th_sort_#{set_sort_by_direction(:name, sort_by).to_s}"}
            -else
              Name
          %th
            -if sortable_by_column
              =link_to "Status", params.merge(sort_by: {column: :status, direction: set_sort_by_direction(:status, sort_by)})
              -if sort_by["column"] == "status"
                %span{class: "glyphicon th_sort_#{set_sort_by_direction(:status, sort_by).to_s}"}
            -else
              Status
          %th
            -if sortable_by_column
              =link_to "Start Date", params.merge(sort_by: {column: :start_date, direction: set_sort_by_direction(:start_date, sort_by)})
              -if sort_by["column"] == "start_date"
                %span{class: "glyphicon th_sort_#{set_sort_by_direction(:start_date, sort_by).to_s}"}
            -else
              Start Date
          %th
            -if sortable_by_column
              =link_to "Request Fulfilled", params.merge(sort_by: {column: :request_fulfilled, direction: set_sort_by_direction(:request_fulfilled, sort_by)})
              -if sort_by["column"] == "request_fulfilled"
                %span{class: "glyphicon th_sort_#{set_sort_by_direction(:request_fulfilled, sort_by).to_s}"}
            -else
              Request Fulfilled
          %th
            -if sortable_by_column
              =link_to "Sponsor Type", params.merge(sort_by: {column: :sponsor_type, direction: set_sort_by_direction(:sponsor_type, sort_by)})
              -if sort_by["column"] == "sponsor_type"
                %span{class: "glyphicon th_sort_#{set_sort_by_direction(:sponsor_type, sort_by).to_s}"}
            -else
              Sponsor Type
          %th
            -if sortable_by_column
              =link_to "Country", params.merge(sort_by: {column: :country, direction: set_sort_by_direction(:country, sort_by)})
              -if sort_by["column"] == "country"
                %span{class: "glyphicon th_sort_#{set_sort_by_direction(:country, sort_by).to_s}"}
            -else
              Country
      %tbody
        - sponsors.each do |sponsor|
          %tr
            %td
              = link_to sponsor.osra_num, hq_sponsor_path(sponsor)
            %td
              = link_to sponsor.name, hq_sponsor_path(sponsor)
            %td
              = sponsor.status.name
            %td
              = format_full_date sponsor.start_date
            %td
              = sponsor.request_fulfilled ? 'Yes' : 'No'
              (#{sponsor.active_sponsorship_count}/#{sponsor.requested_orphan_count})
            %td
              = sponsor.sponsor_type.name
            %td
              = en_ar_country(sponsor.country)

  .pagination
    = will_paginate sponsors, renderer: BootstrapPagination::Rails

= render(partial: '/hq/sponsors/filters.html.haml', locals: {filters: filters}) if defined?(filters)
